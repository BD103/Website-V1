{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BD103 Coding and Creation Hi! I'm BD103. I do things, like code. Learn more here . Most Recent Creation Notepad Notepad is a simple, well. Uh... Notepad? Yeah, that's the right word. It basically has two sections: A working plain text editor, with printing page support A working code editor! It highlights it all, with multi-language support! If you want to see a working (maybe) demo, go to notepad.bd103.repl.co . Enjoy!","title":"Home"},{"location":"#bd103","text":"Coding and Creation Hi! I'm BD103. I do things, like code. Learn more here .","title":"BD103"},{"location":"#most-recent-creation","text":"","title":"Most Recent Creation"},{"location":"#notepad","text":"Notepad is a simple, well. Uh... Notepad? Yeah, that's the right word. It basically has two sections: A working plain text editor, with printing page support A working code editor! It highlights it all, with multi-language support! If you want to see a working (maybe) demo, go to notepad.bd103.repl.co . Enjoy!","title":"Notepad"},{"location":"about/","text":"About Who are you? Someone who exists somewhere. I enjoy coding, composing music, and ocasional making art. What languages do you know? I know HTML, CSS, and Python really well. I also know bits and pieces of JS, PHP, Bash, C#, and Java. Where can I find you? On earth. :P Ok, just joking. Here are some links: Site Repl.it Github What are some of your projects? Check out some of my projects, like my PyPI Package and MkDocs Helper . You can also check out the projects section of this site.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#who-are-you","text":"Someone who exists somewhere. I enjoy coding, composing music, and ocasional making art.","title":"Who are you?"},{"location":"about/#what-languages-do-you-know","text":"I know HTML, CSS, and Python really well. I also know bits and pieces of JS, PHP, Bash, C#, and Java.","title":"What languages do you know?"},{"location":"about/#where-can-i-find-you","text":"On earth. :P Ok, just joking. Here are some links: Site Repl.it Github","title":"Where can I find you?"},{"location":"about/#what-are-some-of-your-projects","text":"Check out some of my projects, like my PyPI Package and MkDocs Helper . You can also check out the projects section of this site.","title":"What are some of your projects?"},{"location":"license/","text":"License This work by BD103 is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . Repl.it , PyCharm , and MkDocs have no affiliation with me. I just use their products, and highly suggest you do too! All rights reserved for all the ideas under the ideas tab. Please do not create without asking first!","title":"License"},{"location":"license/#license","text":"This work by BD103 is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . Repl.it , PyCharm , and MkDocs have no affiliation with me. I just use their products, and highly suggest you do too! All rights reserved for all the ideas under the ideas tab. Please do not create without asking first!","title":"License"},{"location":"ideas/waveform/","text":"Waveform (Minecraft Mod) Waveform is a mod idea that I have that customizes the music that plays in Minecraft: Java Edition. Basically, Dynamic Sounds. It uses position, biome, dimension, time, health, weather, y level, and more. Variables Key Description Value Title Screen Whether to play on the title screen or not None Time How old the world is Integer Sun Position Sunrise, Midday, Sunset, Midnight, Day, Night Choice Weather Clear, Rain, Thunderstorm, Snow, Snowstorm Choice Y Pos How high or low in the world the person is Integer Biome What biome the person is in String Dimension Overworld, Nether, End, etc. Default is Overworld if not mentioned. String In Battle Whether hostile mob is trying to attack the player None In Battle w (Enemy) Fighting a specific hostile mob, depends on mob closest to you Choice Structure In or around (20 blocks) a structure. Nether Fortress, Village, etc. String Death To play on death None Interacting w Dog Feeding Dog, Dog Following None Fight w Dog In Battle with dog helping None Interacting w Cat Feeding Cat, Cat Following, Cat Scaring Creeper None Default Plays when any of the others can't None Distance from Spawn How far away from spawn a player is Integer Near Player If player is near (50 blocks) another player None Wet In water for more than 20 seconds or in sea biome, below sea level or having nautilus effect Boolean Music Disc Can be enabled or disabled in settings. None Setup Song (Key=Value, Repeat) Commands /waveform , /wf Gives a list of commands and what they do. /song <song> [synced] [entity] Plays <song> everywhere if [synced] (default) is true. If false, then only plays for certain entity specified as [entity] . /waveform list [song] , /wf list [song] Sends a list of all the songs that are dynamic if [song] isn't specified. List values can be clicked to send the command /wf list [song] to chat, to give info. If specified, then it gives information on that song. Information includes keys, values, percentages, and whether the person is currently applicable for this song to be played. /waveform get [player] , /wf get [player] If [player] isn't specified, says what song is currently playing and what that song's keys and values and percentages are for the person sending the command. If [player] is specified, than it shows info on that person. If @a is entered, then shows info for each person. /waveform set <setting> <value> Changes the current value of a setting to <value> . Songs Minecraft - Volume Alpha (C418) Key () Door Subwoofer Lullaby Death Living Mice Moog City Haggstrom Minecraft (Title SunPosition=Sunrise) Oxygene Equinoxe Mice on Venus Dry Hands Wet Hands Clark Chris Thirteen Excuse Sweden Cat Dog Danny Beginning Droopy Likes Ricochet Droopy Likes Your Face Minecraft - Volume Beta - Main (C418) Ki Alpha Dead Voxel Blind Spots Flake Moog City 2 Concrete Halls Biome Fest Mutation Haunt Muskie Warmth Floating Trees (Time=Day and Weather=Clear) Aria Math Kyoto Ballad of the Cats Taswell Beginning Dreiton The End Intro Minecraft - Volume Beta - Discs (C418) Chirp (Music Disc) Wait (Music Disc) Mellohi (Music Disc) Stal (Music Disc) Strad (Music Disc) Eleven (Music Disc) Ward (Music Disc) Mall (Music Disc) Blocks (Music Disc) Far (Music Disc) Minecraft - Aquatic Update (C418) Axolotl Shuniji Dragon Fish Minecraft - Nether Update (Lena Raine) Chrysopoeia Rubedo So Below Pigstep - Mono Mix Pigstep - Stereo Mix Settings Setting Description Type Default Enabled Enables the whole entire mod Boolean True Custom Sounds Whether to get custom sounds from resource pack or not Boolean True Client Side Disables non client side features, like structure and battle music. Boolean False Prime Color Primary color when using chat. Numbers to color escape codes. Integer 36 Second Color Secondary color when using chat. Numbers to escape codes. Integer 32 Visualizer Shows waveform of current song in top right hand corner of the screen. Boolean False Music Disc Ambience Whether music disc songs can be added to the rotation of songs. Boolean False License Just as a note, all rights reserved. If you wish to create this mod, you can contact me. Thank you.","title":"Waveform"},{"location":"ideas/waveform/#waveform-minecraft-mod","text":"Waveform is a mod idea that I have that customizes the music that plays in Minecraft: Java Edition. Basically, Dynamic Sounds. It uses position, biome, dimension, time, health, weather, y level, and more.","title":"Waveform (Minecraft Mod)"},{"location":"ideas/waveform/#variables","text":"Key Description Value Title Screen Whether to play on the title screen or not None Time How old the world is Integer Sun Position Sunrise, Midday, Sunset, Midnight, Day, Night Choice Weather Clear, Rain, Thunderstorm, Snow, Snowstorm Choice Y Pos How high or low in the world the person is Integer Biome What biome the person is in String Dimension Overworld, Nether, End, etc. Default is Overworld if not mentioned. String In Battle Whether hostile mob is trying to attack the player None In Battle w (Enemy) Fighting a specific hostile mob, depends on mob closest to you Choice Structure In or around (20 blocks) a structure. Nether Fortress, Village, etc. String Death To play on death None Interacting w Dog Feeding Dog, Dog Following None Fight w Dog In Battle with dog helping None Interacting w Cat Feeding Cat, Cat Following, Cat Scaring Creeper None Default Plays when any of the others can't None Distance from Spawn How far away from spawn a player is Integer Near Player If player is near (50 blocks) another player None Wet In water for more than 20 seconds or in sea biome, below sea level or having nautilus effect Boolean Music Disc Can be enabled or disabled in settings. None","title":"Variables"},{"location":"ideas/waveform/#setup","text":"Song (Key=Value, Repeat)","title":"Setup"},{"location":"ideas/waveform/#commands","text":"","title":"Commands"},{"location":"ideas/waveform/#waveform-wf","text":"Gives a list of commands and what they do.","title":"/waveform, /wf"},{"location":"ideas/waveform/#song-song-synced-entity","text":"Plays <song> everywhere if [synced] (default) is true. If false, then only plays for certain entity specified as [entity] .","title":"/song &lt;song&gt; [synced] [entity]"},{"location":"ideas/waveform/#waveform-list-song-wf-list-song","text":"Sends a list of all the songs that are dynamic if [song] isn't specified. List values can be clicked to send the command /wf list [song] to chat, to give info. If specified, then it gives information on that song. Information includes keys, values, percentages, and whether the person is currently applicable for this song to be played.","title":"/waveform list [song], /wf list [song]"},{"location":"ideas/waveform/#waveform-get-player-wf-get-player","text":"If [player] isn't specified, says what song is currently playing and what that song's keys and values and percentages are for the person sending the command. If [player] is specified, than it shows info on that person. If @a is entered, then shows info for each person.","title":"/waveform get [player], /wf get [player]"},{"location":"ideas/waveform/#waveform-set-setting-value","text":"Changes the current value of a setting to <value> .","title":"/waveform set &lt;setting&gt; &lt;value&gt;"},{"location":"ideas/waveform/#songs","text":"","title":"Songs"},{"location":"ideas/waveform/#minecraft-volume-alpha-c418","text":"Key () Door Subwoofer Lullaby Death Living Mice Moog City Haggstrom Minecraft (Title SunPosition=Sunrise) Oxygene Equinoxe Mice on Venus Dry Hands Wet Hands Clark Chris Thirteen Excuse Sweden Cat Dog Danny Beginning Droopy Likes Ricochet Droopy Likes Your Face","title":"Minecraft - Volume Alpha (C418)"},{"location":"ideas/waveform/#minecraft-volume-beta-main-c418","text":"Ki Alpha Dead Voxel Blind Spots Flake Moog City 2 Concrete Halls Biome Fest Mutation Haunt Muskie Warmth Floating Trees (Time=Day and Weather=Clear) Aria Math Kyoto Ballad of the Cats Taswell Beginning Dreiton The End Intro","title":"Minecraft - Volume Beta - Main (C418)"},{"location":"ideas/waveform/#minecraft-volume-beta-discs-c418","text":"Chirp (Music Disc) Wait (Music Disc) Mellohi (Music Disc) Stal (Music Disc) Strad (Music Disc) Eleven (Music Disc) Ward (Music Disc) Mall (Music Disc) Blocks (Music Disc) Far (Music Disc)","title":"Minecraft - Volume Beta - Discs (C418)"},{"location":"ideas/waveform/#minecraft-aquatic-update-c418","text":"Axolotl Shuniji Dragon Fish","title":"Minecraft - Aquatic Update (C418)"},{"location":"ideas/waveform/#minecraft-nether-update-lena-raine","text":"Chrysopoeia Rubedo So Below Pigstep - Mono Mix Pigstep - Stereo Mix","title":"Minecraft - Nether Update (Lena Raine)"},{"location":"ideas/waveform/#settings","text":"Setting Description Type Default Enabled Enables the whole entire mod Boolean True Custom Sounds Whether to get custom sounds from resource pack or not Boolean True Client Side Disables non client side features, like structure and battle music. Boolean False Prime Color Primary color when using chat. Numbers to color escape codes. Integer 36 Second Color Secondary color when using chat. Numbers to escape codes. Integer 32 Visualizer Shows waveform of current song in top right hand corner of the screen. Boolean False Music Disc Ambience Whether music disc songs can be added to the rotation of songs. Boolean False","title":"Settings"},{"location":"ideas/waveform/#license","text":"Just as a note, all rights reserved. If you wish to create this mod, you can contact me. Thank you.","title":"License"},{"location":"projects/console-rain/","text":"Console Rain Console Rain is just a simple program that similates falling rain drops using the Blessings wrapper . The Blessings wrapper, or Blessings, is a Python package that makes using the Curses module easier. It allows you to move around the cursor, get height and width of terminal, print colors, save a screen, and more.","title":"Console Rain"},{"location":"projects/console-rain/#console-rain","text":"Console Rain is just a simple program that similates falling rain drops using the Blessings wrapper . The Blessings wrapper, or Blessings, is a Python package that makes using the Curses module easier. It allows you to move around the cursor, get height and width of terminal, print colors, save a screen, and more.","title":"Console Rain"},{"location":"projects/image-flipper/","text":"Image Flipper Have you ever wanted to rename all the images in a Minecraft resource pack to other images, so someone can get really confused? Or maybe play Undertale with Flowey looking like Undyne's spear? That's why I created this image flipper. Fork the repl, the upload a folder or .zip file with images inside it! It will then rename them all, essentially flipping the data between the .png s. This only works for .png files, and it will only find the images inside the main folder. It will not go into folders inside the folder specified. I was working on adding a .flipignore file that is just a plain text array that specifies images that it won't flip, but this feature isn't implemented yet. This program is free to use! Enjoy! Try typing imgs.zip in the program! Also, don't run more than 20,000 rotations, it crashes repl.it! :)","title":"Image Flipper"},{"location":"projects/image-flipper/#image-flipper","text":"Have you ever wanted to rename all the images in a Minecraft resource pack to other images, so someone can get really confused? Or maybe play Undertale with Flowey looking like Undyne's spear? That's why I created this image flipper. Fork the repl, the upload a folder or .zip file with images inside it! It will then rename them all, essentially flipping the data between the .png s. This only works for .png files, and it will only find the images inside the main folder. It will not go into folders inside the folder specified. I was working on adding a .flipignore file that is just a plain text array that specifies images that it won't flip, but this feature isn't implemented yet. This program is free to use! Enjoy! Try typing imgs.zip in the program! Also, don't run more than 20,000 rotations, it crashes repl.it! :)","title":"Image Flipper"},{"location":"projects/notepad/","text":"Notepad Notepad is a simple, well. Uh... Notepad? Yeah, that's the right word. Features Simple black and white view Monospaceed font Save and load notes from browser data, we don't save anything! Working text highlighting IDE Multi-lang support Easy notation Smooth feel Print the page directly from your website","title":"Notepad"},{"location":"projects/notepad/#notepad","text":"Notepad is a simple, well. Uh... Notepad? Yeah, that's the right word.","title":"Notepad"},{"location":"projects/notepad/#features","text":"Simple black and white view Monospaceed font Save and load notes from browser data, we don't save anything! Working text highlighting IDE Multi-lang support Easy notation Smooth feel Print the page directly from your website","title":"Features"},{"location":"projects/presspy/","text":"PressPy Presspy is a Python compression software. Intallation Intall with Pip: pip install --upgrade presspy Install latest Github version: May have many bugs! pip install --upgrade git+https://github.com/BD103/presspy How to Use PressPy is purely console based. Open up command prompt, or another console likewise, and type presspy . This gives you a list of available commands and options. There are three main functions: Run Runs a .press file. Usage: presspy run file --keep File: The location of your .press file relative to your current directory. --keep: Use this flag if you wish to keep the extracted source after running. Press Presses a Python program into a .press file. Usage: presspy press path Path: The folder or directory your source code is in relative to your current directory. This folder must contain a press.json file. See the Wiki for more information. Extract Puts the source of a .press file into a folder. Usage: presspy extract file File: The location of your .press file relative to your current directory. Links: Github PyPI Website","title":"PressPy"},{"location":"projects/presspy/#presspy","text":"Presspy is a Python compression software.","title":"PressPy"},{"location":"projects/presspy/#intallation","text":"Intall with Pip: pip install --upgrade presspy Install latest Github version: May have many bugs! pip install --upgrade git+https://github.com/BD103/presspy","title":"Intallation"},{"location":"projects/presspy/#how-to-use","text":"PressPy is purely console based. Open up command prompt, or another console likewise, and type presspy . This gives you a list of available commands and options. There are three main functions:","title":"How to Use"},{"location":"projects/presspy/#run","text":"Runs a .press file. Usage: presspy run file --keep File: The location of your .press file relative to your current directory. --keep: Use this flag if you wish to keep the extracted source after running.","title":"Run"},{"location":"projects/presspy/#press","text":"Presses a Python program into a .press file. Usage: presspy press path Path: The folder or directory your source code is in relative to your current directory. This folder must contain a press.json file. See the Wiki for more information.","title":"Press"},{"location":"projects/presspy/#extract","text":"Puts the source of a .press file into a folder. Usage: presspy extract file File: The location of your .press file relative to your current directory. Links: Github PyPI Website","title":"Extract"},{"location":"projects/pybooklib/","text":"PyBookLib PyBookLib is a two part library designed to host and get template code projects. It is written for mainly Python programs, but it is possible to host other languages as well. PyBookLib has two submodules, each independant of one another: PyBook and PyLib. PyBookLib has no affiliations with the existing PyPI projects PyBook and PyLib . It is a completely separated project, and just happened to be library themed. \ud83d\ude01 Install You can install the package through the following: pip install -U pybooklib If you want the latest development version, which most definitely has bugs, run the following: pip install git+https://github.com/BD103/PyBookLib Use To pull up this markdown file in the console, you can run pybooklib in the command line. Running pybook or pylib gives a list of possible commands with each. PyBookLib The main PyBookLib module has no current function beyond a code bridge and displaying this markdown file in the command line. pybooklib PyBook PyBook's main functionality is connecting to a hosted library and receiving books ( .zip files). The library that is accessed is defined by an environmental variable. Try running something like this: from pybooklib import pybook import os # Set environmental variable for library. Unecessary but helpful all the same pybook . set_url ( \"https://library.bd103.repl.co/api\" ) # Gets a book \"sample-library\" from the user \"BD103\" with the version \"1.2\" and extracts contents to the directory \"pylib-library\" pybook . get ( user = \"BD103\" , book = \"sample-library\" , version = \"1.2\" , direc = \"pylib-library\" ) With this simple script, it connects to library.bd103.repl.co and requests sample-library. This book is a sample script to host your own library. (It was created for Replit , so that's why there is a pyproject.toml.) You can also run some bash commands: # Get a list of commands pybook --help pybook get-book BD103 sample-library --version 1.2 --direc pylib-library pybook get-user BD103 # This should automatically be set to library.bd103.repl.co/api pybook set-url https://link.to.site/api # Umbrella get function to specify exact details pybook get --user BD103 --direc folder You do not have to specify all these parameters. Try removing and replacing some of them and see what happens! PyLib PyLib is for hosting your own library. It is extremely simple. Install pybooklib, and choose your path: Note: These paths will automatically set the IP and Port to 0.0.0.0:8000 . If on a local machine, you can connect through localhost:8000 . If using a server hosting service, it should automatically set the host to your domain. If you are having conflicts with the port, or want a different IP, you can specify it by taking the Python main.py path and replacing pylib.run() with pylib.run(host=\"1.2.3.4\", port=8080) . Python main.py Create a file called main.py. Inside, paste the following: from pybooklib import pylib pylib . run () Run the script to start hosting your library. CLI In the command line, run the following: pylib run Watch as your server gets hosted. Contributing If you want to contribute to this project, go to github.com/BD103/PyBookLib , create a fork and a pull request. All code should be run through the following commands: black pybooklib isort pybooklib --profile black flake8 pybooklib PyTest is not yet implemented. Stay tuned! \ud83c\udfb5","title":"PyBookLib"},{"location":"projects/pybooklib/#pybooklib","text":"PyBookLib is a two part library designed to host and get template code projects. It is written for mainly Python programs, but it is possible to host other languages as well. PyBookLib has two submodules, each independant of one another: PyBook and PyLib. PyBookLib has no affiliations with the existing PyPI projects PyBook and PyLib . It is a completely separated project, and just happened to be library themed. \ud83d\ude01","title":"PyBookLib"},{"location":"projects/pybooklib/#install","text":"You can install the package through the following: pip install -U pybooklib If you want the latest development version, which most definitely has bugs, run the following: pip install git+https://github.com/BD103/PyBookLib","title":"Install"},{"location":"projects/pybooklib/#use","text":"To pull up this markdown file in the console, you can run pybooklib in the command line. Running pybook or pylib gives a list of possible commands with each.","title":"Use"},{"location":"projects/pybooklib/#pybooklib_1","text":"The main PyBookLib module has no current function beyond a code bridge and displaying this markdown file in the command line. pybooklib","title":"PyBookLib"},{"location":"projects/pybooklib/#pybook","text":"PyBook's main functionality is connecting to a hosted library and receiving books ( .zip files). The library that is accessed is defined by an environmental variable. Try running something like this: from pybooklib import pybook import os # Set environmental variable for library. Unecessary but helpful all the same pybook . set_url ( \"https://library.bd103.repl.co/api\" ) # Gets a book \"sample-library\" from the user \"BD103\" with the version \"1.2\" and extracts contents to the directory \"pylib-library\" pybook . get ( user = \"BD103\" , book = \"sample-library\" , version = \"1.2\" , direc = \"pylib-library\" ) With this simple script, it connects to library.bd103.repl.co and requests sample-library. This book is a sample script to host your own library. (It was created for Replit , so that's why there is a pyproject.toml.) You can also run some bash commands: # Get a list of commands pybook --help pybook get-book BD103 sample-library --version 1.2 --direc pylib-library pybook get-user BD103 # This should automatically be set to library.bd103.repl.co/api pybook set-url https://link.to.site/api # Umbrella get function to specify exact details pybook get --user BD103 --direc folder You do not have to specify all these parameters. Try removing and replacing some of them and see what happens!","title":"PyBook"},{"location":"projects/pybooklib/#pylib","text":"PyLib is for hosting your own library. It is extremely simple. Install pybooklib, and choose your path: Note: These paths will automatically set the IP and Port to 0.0.0.0:8000 . If on a local machine, you can connect through localhost:8000 . If using a server hosting service, it should automatically set the host to your domain. If you are having conflicts with the port, or want a different IP, you can specify it by taking the Python main.py path and replacing pylib.run() with pylib.run(host=\"1.2.3.4\", port=8080) .","title":"PyLib"},{"location":"projects/pybooklib/#python-mainpy","text":"Create a file called main.py. Inside, paste the following: from pybooklib import pylib pylib . run () Run the script to start hosting your library.","title":"Python main.py"},{"location":"projects/pybooklib/#cli","text":"In the command line, run the following: pylib run Watch as your server gets hosted.","title":"CLI"},{"location":"projects/pybooklib/#contributing","text":"If you want to contribute to this project, go to github.com/BD103/PyBookLib , create a fork and a pull request. All code should be run through the following commands: black pybooklib isort pybooklib --profile black flake8 pybooklib PyTest is not yet implemented. Stay tuned! \ud83c\udfb5","title":"Contributing"},{"location":"projects/text-dump-engine/","text":"Text Dump Engine What is it? This engine (really just a module) is a handy way to save all your print() code into one file. It loads a .json file, then builds a .py file from that. How do I use it? Very good question. First go to the project page (click the title) then fork it or download it (with the three dots). Editing the JSON Here is a sample JSON text dump: { \"greeting\" : [ \"Hello there my friend!\" , \"How are you today?\" , \"I hope you are well.\" , \"See you around!\" ], \"puns\" : [ \"Nobody:\" , \"\" , \"That random stoplight:\" , \"You have to stop.\" ] } This file builds to a Python file that looks like this: def greeting (): print ( \"Hello there my friend!\" ) input () print ( \"How are you today?) input () print ( \"I hope you are well.\" ) input () print ( \"See you around!\" ) def puns (): print ( \"Nobody:\" ) input () print ( \"\" ) input () print ( \"That random stoplight:\" ) input () print ( \"You have to stop.\" ) Do you see? Keys in the JSON file become function names. Items in the array attached to the key becomes the text printed to the screen. This JSON file is called textdump.json , and it is in the folder called engine/ . The rules for editing the JSON goes by the following: It must follow JSON syntax rules You may have as many keys as you like A key's value must be an array / list The list may have as many values as necessary Importing the Engine Now here comes the true brilliance of the module. You don't need to run any init() functions! By importing the file that supplies the text functions, it automatically rebuilds and reloads the file! So basically, you can just import text.py without worry! Here is a sample import function: from engine.text import * The import * allows you to just run the function name without having to worry about the namespace. You can see the program below.","title":"Text Dump Engine"},{"location":"projects/text-dump-engine/#text-dump-engine","text":"","title":"Text Dump Engine"},{"location":"projects/text-dump-engine/#what-is-it","text":"This engine (really just a module) is a handy way to save all your print() code into one file. It loads a .json file, then builds a .py file from that.","title":"What is it?"},{"location":"projects/text-dump-engine/#how-do-i-use-it","text":"Very good question. First go to the project page (click the title) then fork it or download it (with the three dots).","title":"How do I use it?"},{"location":"projects/text-dump-engine/#editing-the-json","text":"Here is a sample JSON text dump: { \"greeting\" : [ \"Hello there my friend!\" , \"How are you today?\" , \"I hope you are well.\" , \"See you around!\" ], \"puns\" : [ \"Nobody:\" , \"\" , \"That random stoplight:\" , \"You have to stop.\" ] } This file builds to a Python file that looks like this: def greeting (): print ( \"Hello there my friend!\" ) input () print ( \"How are you today?) input () print ( \"I hope you are well.\" ) input () print ( \"See you around!\" ) def puns (): print ( \"Nobody:\" ) input () print ( \"\" ) input () print ( \"That random stoplight:\" ) input () print ( \"You have to stop.\" ) Do you see? Keys in the JSON file become function names. Items in the array attached to the key becomes the text printed to the screen. This JSON file is called textdump.json , and it is in the folder called engine/ . The rules for editing the JSON goes by the following: It must follow JSON syntax rules You may have as many keys as you like A key's value must be an array / list The list may have as many values as necessary","title":"Editing the JSON"},{"location":"projects/text-dump-engine/#importing-the-engine","text":"Now here comes the true brilliance of the module. You don't need to run any init() functions! By importing the file that supplies the text functions, it automatically rebuilds and reloads the file! So basically, you can just import text.py without worry! Here is a sample import function: from engine.text import * The import * allows you to just run the function name without having to worry about the namespace. You can see the program below.","title":"Importing the Engine"},{"location":"tutorials/rest-api/","text":"Note , this content was originally posted on the Repl Talk Forum . Certain concepts that are mentioned are specific for Replit, like cycles and pyproject.toml . Hello! I know I've been pretty inactive in Repl Talk (I've been doing Github and PyPI Packages), but I decided to make this tutorial. Making a Flask Rest API \ud83d\ude43 Yes! I'm willing to bet most of the people viewing this has a Flask website, or at least knows Python. ( Woo, Python Gang Unite! ) Anyway... This tutorial is mainly Python. I will split it up into many different parts and sections to increase effectiveness. Let's get started. \ud83d\udcbe Setup a Basic Flask Site \ud83d\udcbd First, we need to make a simple Flask site. Create a new Python repl and make the following file setup: main.py templates/ |- index.html static/ |- style.css Also insert the following into their respective files. main.py from flask import Flask , render_template app = Flask ( \"app\" ) @app . route ( \"/\" ) def index (): return render_template ( \"index.html\" ) if __name__ == \"__main__\" : app . run ( host = \"0.0.0.0\" , port = 8000 ) templates/index.html <!DOCTYPE html> < html > < head > < title > Rest API Server </ title > < link rel = \"stylesheet\" href = \"{{ url_for('static', filename='style.css') }}\" > </ head > < body > < div class = \"center\" > < p > Welcome to this website's Rest API! Please access it at the < code > /api </ code > endpoint. You can find the docs < a href = \"/docs\" > here </ a > . </ p > </ div > </ body > </ html > style.css body { /* You can replace the colors with your own :) */ background : linear-gradient ( to top left , darkblue , darkcyan ); background-repeat : no-repeat ; background-size : cover ; background-attachment : fixed ; color : white ; font-family : \"Segoe UI\" , Tohama , Geneva , Verdana , sans-serif ; font-size : 20 px ; } . center { position : fixed ; top : 50 % ; left : 50 % ; transform : translate ( -50 % , -50 % ); } If you're lazy, you can also fork the repl linked below. :D Now that we have some sample files, let's try running the repo! Yay! We did it! Well, at least we created the first stepping stones to a great backend. \ud83d\udd3b Error Handling \ud83d\udd3a (E.g. 404, 418 , 500...) You'll notice that if you click the docs button it will give you a 404 error. Let's fix that by first making an error handling system. from flask import ... from werkzeug.exceptions import HTTPException ... # Insert the following after the def index(): function @app . errorhandler ( Exception ) def error ( e ): # Set default error code in case something goes wrong code = 500 if isinstance ( e , HTTPException ): code = e . code return render_template ( \"error.html\" , e = str ( e )), code Also make a error.html page under templates and insert the following: <!DOCTYPE html> < html > < head > < title > Rest API Server - Error </ title > < link rel = \"stylesheet\" href = \"{{ url_for('static', filename='style.css' }}\" > </ head > < body > < div class = \"center\" > < h3 > AAAA! Something went (Horribly) Wrong! </ h3 > < code > {{ e }} </ code > </ div > </ body > </ html > Quick (not really) thing on all those {{ ... }} . Basically, Flask uses Jinja2, a website formatter. It allows you to specify variables, and serve them specifically to the client. That's what the render_template() function does. A Flask specific example is {{ url_for('static', filename='style.css') }} . Flask has a function url_for() , so when it tries to get the variable, it runs the function. url_for() has two main parameters, folder and filename. The folder is the first specified variable, static. Remember that we created the static folder and it has style.css inside. The filename obviously specifies the file name. If you go to the actual website and view the <link ...> tag, you will see that is has href=\"/static/style.css\" . Of course, this isn't necessary, you don't have to use url_for() , but Flask highly encourages it. So do it anyways. This is all a bit different for the <code>{{ e }}</code> . e is a variable that we pass in the render_template() function. e is the content of the error that happened, so an example is 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again. That is what e gets set to when you go to a non-existant section of the site. ( Side Note: Watch out for all those pesky ~~birds~~ 500 errors. That means something is wrong with your code. ) Of course, after reading back this entire section, I never did explain how to create the actual docs for the API. That's probably because we haven't created the API yet, so we are going to put that on hold... \ud83d\udd0c The Actual API (Woo Celebrate and Other Fun Words \ud83e\udd73) Ok. The API is going to be based after the /api endpoint, so an example is rest-api-template.bd103.repl.co/api . Let's start writing the function. from flask import Flask , render_template , request ... # Insert after def error(): function @app . route ( \"/api\" , methods = [ \"GET\" , \"POST\" ]) def api (): Ok. Let's stop for a second. In @app.route(...) I wrote the keyword argument methods=[\"GET\", \"POST\"] . This is abolutely necessary, as it tell Flask to accept requests so using curl ... , requests.get(...) , and other methods will all works. Also make sure to update the import statement. Let's continue: ... @app . route ( \"/api\" , methods = [ \"GET\" , \"POST\" ]) def api (): data = request . args . get ( \"data\" ) if data is None : return { \"type\" : \"Error\" , \"content\" : \"No data requested\" } elif data == \"1\" : return { \"type\" : \"Data\" , \"content\" : \"Yay! Request successful!\" } else : return { \"type\" : \"Error\" , \"content\" : \"Data specified does not exist\" } A few things: request.args.get(\"data\") gets the data from the requested url. For instance, if someone tried to go to /api?data=0 , they would get the object saying \"Data specified does not exist\" . Instead, if they went to /api?data=1 then they would get a successful request. You always want to have an if data is None , for if the person accessing the url doesn't specify an argument. An example is if someone goes to /api?name=something . data would be equal to None because it doesn't exist and wasn't specified. I like to return all my data in an object (or JSON) based format. So I give a type, and I give content. I do this usually when I write an API that can return different types of data so that the requester knows what they are getting. You do not need to return data in this kind of format, but many other APIs work the same exact way. There you go, you can get multiple arguments and return different items dependent. Sub-Subject: \ud83d\udd17 URL Variables \ud83d\udd17 Quick subject change in case you want to be more specific, you can create variable urls. For instance if you want to specify a specific type of data, e.g. Pizzas or People, you can do something like this: @app . route ( \"/api/<type>\" ) def api ( type ): if type == \"pizza\" : return \"There are 10 pizzas being made in the pizzaria\" elif type == \"people\" : return \"There are 3 people making the pizzas in the pizzaria\" else : return \"Type not available\" The variable name is specified with <varname> , and you have to make a parameter in the function. You can string multiple together, but it doesn't look as good if you make you API just that. Join URL variables and POST arguments to get an amazing website. \ud83d\udcbb Actual Applications \ud83d\udcbb In the replit, we are going to be saving and returning hit counts. For instance, how many times the website gets connected to a user. We are going to do this with simple variables, but they will get reset once the program stops. This is intentional, and you should probably change this. Challenge: Make an API where it saves the hit count as a JSON file, then accesses it so that your data gets saved! from flask import Flask , request , render_template from werkzeug.exceptions import HTTPException app = Flask ( \"app\" ) hits = 0 errors = 0 @app . route ( \"/\" ) def index (): global hits hits += 1 return render_template ( \"index.html\" ) @app . errorhandler ( Exception ) def error ( e ): global errors errors += 1 code = 500 if isinstance ( e , HTTPException ): code = e . code return render_template ( \"errors.html\" , e = str ( e )), code @app . route ( \"/api\" ) def api (): global hits , errors hits += 1 data = request . arg . get ( \"data\" ) if data is None : return { \"type\" : \"Error\" , \"content\" : \"No data requested\" } elif data == \"hits\" : return { \"type\" : \"HitCount\" , \"content\" : hits } elif data == \"errors\" : return { \"type\" : \"ErrorCount\" , \"content\" : errors } else : return { \"type\" : \"Error\" , \"content\" : \"Data specified does not exist\" } if __name__ == \"__main__\" : app . run ( host = \"0.0.0.0\" , port = 8000 ) There we go. We have an application that counts how many times the site has been accessed, and also how many times an error has occurred, and returns that data. Congratulations! I give you guys a working Rest API! Feel free to fork this repl and edit it to your will. Share what you've done in the comments, too. I would like to see it! \ud83d\udcda Making a Documentation \ud83d\udcda By now, you guys are pros at this. Insert the following into main.py : ... # Maybe somewhere below index(): ? @app . route ( \"/docs\" ) def docs (): global hits hits += 1 return render_template ( \"docs.html\" ) ... Create docs.html under the templates folder: <!DOCTYPE html> < html > < head > < title > Rest API Server - Docs </ title > < link rel = \"stylesheet\" href = \"{{ url_for('static', filename='style.css') }}\" > </ head > < body > < h1 > Rest API Docs </ h1 > < p > Hi! This is a template, so you are going to have to fill this out yourself. Sorry :D </ p > </ body > </ html > Like it said, you're going to have to fill out the docs yourself. Sorry, but it is now your API. You know what it does, I probably don't. Also, do everyone a favor, and make the documentation actually readable . As much as I like Github, their docs are an absolutely confusing mess of programming jargon. Bonus Topic: \u2728 Tokens \u2728 Many APIs require authentication. Maybe there is data that we want to keep private, but still want to include in the API. An example is Github's API accessing personal information. You have to create a Personal Access Token, as send it in the header as part of the request. We are going to add a way to do this as well, though there are some drawbacks to this solution. First, add import pickle at the top of the script. from flask import Flask , request , render_template from werkzeug.exceptions import HTTPException import pickle ... Pickle is a binary handling system make specifically for Python. Common uses are saving variables and classes and objects. It can also save as readable(~~ish~~) text. Next let's create a pickle file. (I'll be using the console, I won't be writing this into any .py file. I recommend you do this too, though you can also make your own function. $ python Python 3.8.7 (default, ...) RaNdOm TeXt HeRe Ok FuN > >> import pickle > >> token = [ \"123456\" , \"abcdef\" , \"BD103WuzHere\" ] > >> with open ( \"tokens.pkl\" , \"wb\" ) as p: ... pickle.dump(token, p, -1) ... > >> exit () $ clear Make sure to use correct indentation for the pickle.dump(...) line. The $ represents a bash command, so something that you run in the command line. The >>> represents a command that you run in the Python REPL. ... represents indented script, so the contents of a loop, function, etc. Also, running clear at the end isn't necessary, but I like cleaning up after myself. To make sure that this script worked, check to see if tokens.pkl is in your program files. You can also replace the values inside token to any password you want. I must say, though, .pkl files are binary. Any normal computer will have trouble reading it, but Replit is weird and will render all the text in the file when viewed. This means that your passwords can be seen by anyone with the repl link. I recommend setting up an external server, like MongoDB, to store actual passwords if you want to do this professionally. Wow. With that out of the way, let's edit our main script: ... @app . route ( \"/api\" , methods = [ \"GET\" , \"POST\" ]) def api (): global hits , errors hits += 1 data = request . args . get ( \"data\" ) token = request . args . get ( \"token\" ) with open ( \"tokens.pkl\" , \"rb\" ) as t : if token is not None : if token in pickle . loads ( t . read ()): auth = True else : auth = False else : auth = False if data is None : return { \"type\" : \"Error\" , \"content\" : \"No data requested\" } elif data == \"hits\" : return { \"type\" : \"HitCount\" , \"content\" : hits } elif data == \"errors\" and not auth : return { \"type\" : \"Error\" , \"content\" : \"Not authenticated\" }, 401 elif data == \"errors\" and auth : return { \"type\" : \"ErrorCount\" , \"content\" : errors } else : return { \"type\" : \"Error\" , \"content\" : \"Data specified does not exist\" } if __name__ == \"__main__\" : app . run ( host = \"0.0.0.0\" , port = 8000 ) There you go. Now the program will read tokens.pkl , see if the specified token in the request (E.g. /api?data=errors&token=BD103WuzHere ) is in the file. If so, it sets the variable auth to True. Then it detects if the request is authorized, and returns different data dependent. Final File Setup Just in to confirm, this is the final directory setup you should have. ( You can also peek at the repl to see it too! ) main.py static/ |- style.css templates/ |- index.html |- error.html |- docs.html tokens.pkl Some optional files: README.md pyproject.toml poetry.lock So, just like that it's over. I really hope you guys find this useful. Now, I try not to ask this a lot, but honestly. I poured my heart and soul and mind into this tutorial. Could you please upvote this? I don't want all this knowledge to go to waste, and I really appreciate it. Thank you, again, and I will see you around. @BD103, Python Developer and Overall Great Guy (If I do say so myself \ud83d\ude01)","title":"Make a Rest API with Python"},{"location":"tutorials/rest-api/#making-a-flask-rest-api","text":"Yes! I'm willing to bet most of the people viewing this has a Flask website, or at least knows Python. ( Woo, Python Gang Unite! ) Anyway... This tutorial is mainly Python. I will split it up into many different parts and sections to increase effectiveness. Let's get started.","title":"Making a Flask Rest API \ud83d\ude43"},{"location":"tutorials/rest-api/#setup-a-basic-flask-site","text":"First, we need to make a simple Flask site. Create a new Python repl and make the following file setup: main.py templates/ |- index.html static/ |- style.css Also insert the following into their respective files. main.py from flask import Flask , render_template app = Flask ( \"app\" ) @app . route ( \"/\" ) def index (): return render_template ( \"index.html\" ) if __name__ == \"__main__\" : app . run ( host = \"0.0.0.0\" , port = 8000 ) templates/index.html <!DOCTYPE html> < html > < head > < title > Rest API Server </ title > < link rel = \"stylesheet\" href = \"{{ url_for('static', filename='style.css') }}\" > </ head > < body > < div class = \"center\" > < p > Welcome to this website's Rest API! Please access it at the < code > /api </ code > endpoint. You can find the docs < a href = \"/docs\" > here </ a > . </ p > </ div > </ body > </ html > style.css body { /* You can replace the colors with your own :) */ background : linear-gradient ( to top left , darkblue , darkcyan ); background-repeat : no-repeat ; background-size : cover ; background-attachment : fixed ; color : white ; font-family : \"Segoe UI\" , Tohama , Geneva , Verdana , sans-serif ; font-size : 20 px ; } . center { position : fixed ; top : 50 % ; left : 50 % ; transform : translate ( -50 % , -50 % ); } If you're lazy, you can also fork the repl linked below. :D Now that we have some sample files, let's try running the repo! Yay! We did it! Well, at least we created the first stepping stones to a great backend.","title":"\ud83d\udcbe Setup a Basic Flask Site \ud83d\udcbd"},{"location":"tutorials/rest-api/#error-handling-eg-404-418-500","text":"You'll notice that if you click the docs button it will give you a 404 error. Let's fix that by first making an error handling system. from flask import ... from werkzeug.exceptions import HTTPException ... # Insert the following after the def index(): function @app . errorhandler ( Exception ) def error ( e ): # Set default error code in case something goes wrong code = 500 if isinstance ( e , HTTPException ): code = e . code return render_template ( \"error.html\" , e = str ( e )), code Also make a error.html page under templates and insert the following: <!DOCTYPE html> < html > < head > < title > Rest API Server - Error </ title > < link rel = \"stylesheet\" href = \"{{ url_for('static', filename='style.css' }}\" > </ head > < body > < div class = \"center\" > < h3 > AAAA! Something went (Horribly) Wrong! </ h3 > < code > {{ e }} </ code > </ div > </ body > </ html > Quick (not really) thing on all those {{ ... }} . Basically, Flask uses Jinja2, a website formatter. It allows you to specify variables, and serve them specifically to the client. That's what the render_template() function does. A Flask specific example is {{ url_for('static', filename='style.css') }} . Flask has a function url_for() , so when it tries to get the variable, it runs the function. url_for() has two main parameters, folder and filename. The folder is the first specified variable, static. Remember that we created the static folder and it has style.css inside. The filename obviously specifies the file name. If you go to the actual website and view the <link ...> tag, you will see that is has href=\"/static/style.css\" . Of course, this isn't necessary, you don't have to use url_for() , but Flask highly encourages it. So do it anyways. This is all a bit different for the <code>{{ e }}</code> . e is a variable that we pass in the render_template() function. e is the content of the error that happened, so an example is 404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again. That is what e gets set to when you go to a non-existant section of the site. ( Side Note: Watch out for all those pesky ~~birds~~ 500 errors. That means something is wrong with your code. ) Of course, after reading back this entire section, I never did explain how to create the actual docs for the API. That's probably because we haven't created the API yet, so we are going to put that on hold...","title":"\ud83d\udd3b Error Handling \ud83d\udd3a (E.g. 404, 418, 500...)"},{"location":"tutorials/rest-api/#the-actual-api-woo-celebrate-and-other-fun-words","text":"Ok. The API is going to be based after the /api endpoint, so an example is rest-api-template.bd103.repl.co/api . Let's start writing the function. from flask import Flask , render_template , request ... # Insert after def error(): function @app . route ( \"/api\" , methods = [ \"GET\" , \"POST\" ]) def api (): Ok. Let's stop for a second. In @app.route(...) I wrote the keyword argument methods=[\"GET\", \"POST\"] . This is abolutely necessary, as it tell Flask to accept requests so using curl ... , requests.get(...) , and other methods will all works. Also make sure to update the import statement. Let's continue: ... @app . route ( \"/api\" , methods = [ \"GET\" , \"POST\" ]) def api (): data = request . args . get ( \"data\" ) if data is None : return { \"type\" : \"Error\" , \"content\" : \"No data requested\" } elif data == \"1\" : return { \"type\" : \"Data\" , \"content\" : \"Yay! Request successful!\" } else : return { \"type\" : \"Error\" , \"content\" : \"Data specified does not exist\" } A few things: request.args.get(\"data\") gets the data from the requested url. For instance, if someone tried to go to /api?data=0 , they would get the object saying \"Data specified does not exist\" . Instead, if they went to /api?data=1 then they would get a successful request. You always want to have an if data is None , for if the person accessing the url doesn't specify an argument. An example is if someone goes to /api?name=something . data would be equal to None because it doesn't exist and wasn't specified. I like to return all my data in an object (or JSON) based format. So I give a type, and I give content. I do this usually when I write an API that can return different types of data so that the requester knows what they are getting. You do not need to return data in this kind of format, but many other APIs work the same exact way. There you go, you can get multiple arguments and return different items dependent.","title":"\ud83d\udd0c The Actual API (Woo Celebrate and Other Fun Words \ud83e\udd73)"},{"location":"tutorials/rest-api/#sub-subject-url-variables","text":"Quick subject change in case you want to be more specific, you can create variable urls. For instance if you want to specify a specific type of data, e.g. Pizzas or People, you can do something like this: @app . route ( \"/api/<type>\" ) def api ( type ): if type == \"pizza\" : return \"There are 10 pizzas being made in the pizzaria\" elif type == \"people\" : return \"There are 3 people making the pizzas in the pizzaria\" else : return \"Type not available\" The variable name is specified with <varname> , and you have to make a parameter in the function. You can string multiple together, but it doesn't look as good if you make you API just that. Join URL variables and POST arguments to get an amazing website.","title":"Sub-Subject: \ud83d\udd17 URL Variables \ud83d\udd17"},{"location":"tutorials/rest-api/#actual-applications","text":"In the replit, we are going to be saving and returning hit counts. For instance, how many times the website gets connected to a user. We are going to do this with simple variables, but they will get reset once the program stops. This is intentional, and you should probably change this. Challenge: Make an API where it saves the hit count as a JSON file, then accesses it so that your data gets saved! from flask import Flask , request , render_template from werkzeug.exceptions import HTTPException app = Flask ( \"app\" ) hits = 0 errors = 0 @app . route ( \"/\" ) def index (): global hits hits += 1 return render_template ( \"index.html\" ) @app . errorhandler ( Exception ) def error ( e ): global errors errors += 1 code = 500 if isinstance ( e , HTTPException ): code = e . code return render_template ( \"errors.html\" , e = str ( e )), code @app . route ( \"/api\" ) def api (): global hits , errors hits += 1 data = request . arg . get ( \"data\" ) if data is None : return { \"type\" : \"Error\" , \"content\" : \"No data requested\" } elif data == \"hits\" : return { \"type\" : \"HitCount\" , \"content\" : hits } elif data == \"errors\" : return { \"type\" : \"ErrorCount\" , \"content\" : errors } else : return { \"type\" : \"Error\" , \"content\" : \"Data specified does not exist\" } if __name__ == \"__main__\" : app . run ( host = \"0.0.0.0\" , port = 8000 ) There we go. We have an application that counts how many times the site has been accessed, and also how many times an error has occurred, and returns that data. Congratulations! I give you guys a working Rest API! Feel free to fork this repl and edit it to your will. Share what you've done in the comments, too. I would like to see it!","title":"\ud83d\udcbb Actual Applications \ud83d\udcbb"},{"location":"tutorials/rest-api/#making-a-documentation","text":"By now, you guys are pros at this. Insert the following into main.py : ... # Maybe somewhere below index(): ? @app . route ( \"/docs\" ) def docs (): global hits hits += 1 return render_template ( \"docs.html\" ) ... Create docs.html under the templates folder: <!DOCTYPE html> < html > < head > < title > Rest API Server - Docs </ title > < link rel = \"stylesheet\" href = \"{{ url_for('static', filename='style.css') }}\" > </ head > < body > < h1 > Rest API Docs </ h1 > < p > Hi! This is a template, so you are going to have to fill this out yourself. Sorry :D </ p > </ body > </ html > Like it said, you're going to have to fill out the docs yourself. Sorry, but it is now your API. You know what it does, I probably don't. Also, do everyone a favor, and make the documentation actually readable . As much as I like Github, their docs are an absolutely confusing mess of programming jargon.","title":"\ud83d\udcda Making a Documentation \ud83d\udcda"},{"location":"tutorials/rest-api/#bonus-topic-tokens","text":"Many APIs require authentication. Maybe there is data that we want to keep private, but still want to include in the API. An example is Github's API accessing personal information. You have to create a Personal Access Token, as send it in the header as part of the request. We are going to add a way to do this as well, though there are some drawbacks to this solution. First, add import pickle at the top of the script. from flask import Flask , request , render_template from werkzeug.exceptions import HTTPException import pickle ... Pickle is a binary handling system make specifically for Python. Common uses are saving variables and classes and objects. It can also save as readable(~~ish~~) text. Next let's create a pickle file. (I'll be using the console, I won't be writing this into any .py file. I recommend you do this too, though you can also make your own function. $ python Python 3.8.7 (default, ...) RaNdOm TeXt HeRe Ok FuN > >> import pickle > >> token = [ \"123456\" , \"abcdef\" , \"BD103WuzHere\" ] > >> with open ( \"tokens.pkl\" , \"wb\" ) as p: ... pickle.dump(token, p, -1) ... > >> exit () $ clear Make sure to use correct indentation for the pickle.dump(...) line. The $ represents a bash command, so something that you run in the command line. The >>> represents a command that you run in the Python REPL. ... represents indented script, so the contents of a loop, function, etc. Also, running clear at the end isn't necessary, but I like cleaning up after myself. To make sure that this script worked, check to see if tokens.pkl is in your program files. You can also replace the values inside token to any password you want. I must say, though, .pkl files are binary. Any normal computer will have trouble reading it, but Replit is weird and will render all the text in the file when viewed. This means that your passwords can be seen by anyone with the repl link. I recommend setting up an external server, like MongoDB, to store actual passwords if you want to do this professionally. Wow. With that out of the way, let's edit our main script: ... @app . route ( \"/api\" , methods = [ \"GET\" , \"POST\" ]) def api (): global hits , errors hits += 1 data = request . args . get ( \"data\" ) token = request . args . get ( \"token\" ) with open ( \"tokens.pkl\" , \"rb\" ) as t : if token is not None : if token in pickle . loads ( t . read ()): auth = True else : auth = False else : auth = False if data is None : return { \"type\" : \"Error\" , \"content\" : \"No data requested\" } elif data == \"hits\" : return { \"type\" : \"HitCount\" , \"content\" : hits } elif data == \"errors\" and not auth : return { \"type\" : \"Error\" , \"content\" : \"Not authenticated\" }, 401 elif data == \"errors\" and auth : return { \"type\" : \"ErrorCount\" , \"content\" : errors } else : return { \"type\" : \"Error\" , \"content\" : \"Data specified does not exist\" } if __name__ == \"__main__\" : app . run ( host = \"0.0.0.0\" , port = 8000 ) There you go. Now the program will read tokens.pkl , see if the specified token in the request (E.g. /api?data=errors&token=BD103WuzHere ) is in the file. If so, it sets the variable auth to True. Then it detects if the request is authorized, and returns different data dependent.","title":"Bonus Topic: \u2728 Tokens \u2728"},{"location":"tutorials/rest-api/#final-file-setup","text":"Just in to confirm, this is the final directory setup you should have. ( You can also peek at the repl to see it too! ) main.py static/ |- style.css templates/ |- index.html |- error.html |- docs.html tokens.pkl Some optional files: README.md pyproject.toml poetry.lock So, just like that it's over. I really hope you guys find this useful. Now, I try not to ask this a lot, but honestly. I poured my heart and soul and mind into this tutorial. Could you please upvote this? I don't want all this knowledge to go to waste, and I really appreciate it. Thank you, again, and I will see you around. @BD103, Python Developer and Overall Great Guy (If I do say so myself \ud83d\ude01)","title":"Final File Setup"}]}